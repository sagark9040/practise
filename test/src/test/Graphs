//		- Trees & Graphs - BFS/DFS, Pre,Post,In traversals, Adj List, Matrix
//		- DAG, AVL, R/B
//		- Arrays/Lists/Stacks/Queues/HashMaps/HashSets/HashTables/LL-Insertions, Deletions, Retrieval
//		- Iterator, Comparator
//		- Bit Shifts

class Graph{
	int V;
	LinkedList<Integer> adj[];
	
	Graph(int v){
		V = v;
		new LinkedList<Integer>[V];
		for(int i=0; i<v; i++)
			adj[i] = new LinkedList<Integer>();
	}
	
	void addEdge(int v, int w){
		adj[v].add(w);
	}		
	
	void dfs(int node){
		boolean[] visited = new boolean[V];
		dfsUtil(node, visited);
	}
	
	void dfsUtil(int v, boolean visited[]){
		visited[v] = true;
		System.out.print(v + " ");
		
		Iterator<Integer> i = adj[v].listIterator(); //TODO I didn't know this iterator
		
		while(i.hasNext()){
			int n = i.next();
			if(!visited[n])
				dfsUtil(n, visited);
				
		}
	}
}
	
public class GraphImpl{
	 public static void main(String args[])
    {
        Graph g = new Graph(4);
 
        g.addEdge(0, 1);
        g.addEdge(0, 2);
        g.addEdge(1, 2);
        g.addEdge(2, 0);
        g.addEdge(2, 3);
        g.addEdge(3, 3);
 
        System.out.println("Following is Depth First Traversal "+
                           "(starting from vertex 2)");
 
        g.DFS(2);
    }
}
	
	
	
	
	
	
	
	
	
	